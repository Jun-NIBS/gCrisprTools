
## -----------------------------------------------------------------------------
## File Utilities - mostly adapted from Steve

##' Initializes the output directory
##'
##' If outdir is NULL, then no directory is checked/created. This also implies
##' that creating plots is not possible.
##'
##' @param outdir character vector pointing to a directory to check/create
##' @return TRUE if the output directory was created, otherwise FALSE (it might
##' already exist).
initOutDir <- function(outdir) {
  if (is.null(outdir)) {
    return(FALSE)
  }
  if (!is.character(outdir) && length(outdir) != 1) {
    stop("character required for `outdir`")
  }
  outdir.created <- FALSE
  if (dir.exists(outdir)) {
    if (!dir.writable(outdir)) {
      stop("Can't write to output directory: ", outdir)
    }
  } else {
    pdir <- dirname(outdir)
    if (!dir.exists(pdir)) {
      stop("Path to outdir does not exist: ", pdir)
    }
    if (!dir.writable(pdir)) {
      stop("Can't create output directory in: ", pdir)
    }
    dir.create(outdir)
    outdir.created <- TRUE
  }
  outdir.created
}



##' Utility function to determine if paths listed are real directories; stolen from multiGSEA
##'
##' @param ... character vectors containing file paths. Tilde-expansion is
##' done: see 'path.expand'.
##'
##' @return A logical vector indicating whether or not the queried directories
##' exist.
dir.exists <- function(...) {
  sapply(file.info(...)$isdir, isTRUE)
}

##' Checks that the directory provided is writable by the current user; stolen from multiGSEA
##'
##' This works by testing to put a temporary file into an already existing
##' directory
##'
##' @param path The path to a directory to check.
##'
##' @return \code{logical}, \code{TRUE} if \code{path} is writable by the
##' current user, otherise \code{FALSE}
dir.writable <- function(path) {
  if (!dir.exists(path)) {
    stop("The directory provided does not exist: ", path)
  }
  tmp.fn <- tempfile(tmpdir=path, fileext='.test.tmp')
  on.exit({
    if (file.exists(tmp.fn)) unlink(tmp.fn)
  })
  
  tryCatch({
    suppressWarnings(writeLines('test', tmp.fn))
    TRUE
  }, error=function(e) FALSE)
}


##' @title Check compatibility of a sample key with a supplied object
##' @description For many gCrisprTools functions, a sample key must be provided that specifies 
##' sample mapping to experimental groups and specifies which of these contains control samples. 
##' This function checks whether the specified sample key is of the proper format and has 
##' properties consistent matching the specified object. 
##' @param sampleKey A named factor, where the \code{levels} indicate the experimental replicate 
##' groups and the \code{names} match the \code{colnames} of the expression matrix contained in \code{object}. 
##' The first \code{level} should correspond to the control samples, but obviously there is no 
##' way to algorithmically control this. 
##' @param object An \code{ExpressionSet}, \code{EList}, or matrix.  
##' @return A logical indicating whether the objects are compatible.
##' @import limma
##' @author Russell Bainer
##' @export
ct.inputCheck <- function(sampleKey, object){
  
  #Check input formats
  if(!(class(object) %in% c("ExpressionSet", "EList", "matrix"))){stop(paste(deparse(substitute(object)), "is not an ExpressionSet, Elist, or matrix."))}
  if(!(is.factor(sampleKey)) | !is.ordered(sampleKey)){stop(paste(deparse(substitute(sampleKey)), "is not an ordered factor."))}
  if(is.null(names(sampleKey))){stop(paste(deparse(substitute(sampleKey)), "must have a names attribute, specifying the sample assignments in", deparse(substitute(object)), "."))}
  
  #Check to see if the names match properly
  if(class(object) == "EList"){
    dat <- object$E
  }else if(class(object) == "ExpressionSet"){
    dat <- exprs(object)
  }else{
    dat <- object
  }
  
  if(!setequal(colnames(dat), names(sampleKey))){stop(paste("The names of", deparse(substitute(sampleKey)), "must exactly match the colnames of the data contained in", deparse(substitute(object)), "."))}
  
  return(TRUE)  
}  










