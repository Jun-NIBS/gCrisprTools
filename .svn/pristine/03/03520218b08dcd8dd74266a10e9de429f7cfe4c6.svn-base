

get.data <- function(ngsid, storedir, groupname, tweak.pheno=NULL) {
	require(ExpressionPlot)
	#require(shRNASeqExpressionPlot)

	# Get counts from EP
	proj <- ep.find.project(ngsid)
	cds <- ep.CountDataSet(proj, feature.type = "crispr-gRNA", attach.annot = TRUE)
	if(!is.null(tweak.pheno)) 
		pData(cds) = tweak.pheno(pData(cds))
	esetCounts = ExpressionSet(counts(cds), phenoData=phenoData(cds), featureData=featureData(cds), annotation=annotation(cds))
	saveData(cds, storedir)
	saveData(esetCounts, storedir)

	# Save some summarization and stats
	se <- ep.SummarizedExperiment(proj, feature.type = "crispr-gRNA", attach.annot=TRUE)
	acCds <- ep.CountDataSet(proj, feature.type = "alignment_class", attach.annot = TRUE)
	saveData(acCds, storedir)
	saveData(se, storedir)

	# Normalize using size.factors
	normCounts <- t(t(counts(cds))/cds$"sizeFactor.crispr-gRNA")
	esetNorm = ExpressionSet(normCounts, phenoData=phenoData(cds), featureData=featureData(cds), annotation=annotation(cds))
	saveData(esetNorm, storedir)

	# Filter low abundance transcripts
	min.reps <- min(table(pData(cds)[,groupname]))
	min.expr <- 10
	keep <- rowSums(counts(cds) >= min.expr) >= min.reps
	es <- cds[keep]
	rmed = setdiff(featureNames(cds), featureNames(es))
	esetFilt = ExpressionSet(counts(es), phenoData=phenoData(es), featureData=featureData(es), annotation=annotation(es))
	saveData(esetFilt, storedir)

	filtNormCounts <- t(t(counts(es))/es$"sizeFactor.crispr-gRNA")
	esetFiltNorm = ExpressionSet(filtNormCounts, phenoData=phenoData(es), featureData=featureData(es), annotation=annotation(es))
	saveData(esetFiltNorm, storedir)
}

