###################
#
# This is an example Crispr workflow, using NGS830 as an example.
#

library(ExpressionPlot)
library(Biobase)
library(limma)
library(gCrisprTools)


#get the data; note that the relevant element of proj must be selected by hand. 
proj <- ep.find.project("PRJ0006644")
ann <- ep.load.annot(proj, "crispr-gRNA")
es <- ep.ExpressionSet(proj, feature.type = "crispr-gRNA", stat = "count")
pheno <- pData(es)
pheno$TREATMENT_NAME <- gsub(' ', '', pheno$TREATMENT_NAME)

#Generate a contrast of interest using voom/limma
design <- model.matrix(~ 0 + TREATMENT_NAME, pheno)
colnames(design) <- gsub('TREATMENT_NAME', '', colnames(design))
contrasts <- makeContrasts(DeathExpansion - ControlExpansion, levels=design)

vm <- voom(exprs(es), design)
fit <- lmFit(vm, design)
fit <- contrasts.fit(fit, contrasts)
fit <- eBayes(fit)

#Generate results
resultsDF <- ct.generateResults(fit, annotation = ann, RRAalphaCutoff = 0.05,
                   permutations = 100)

#OR
#resultsDF <- ct.generateResults(fit, annotation = ann, RRAalphaCutoff = 0.05, permutations = 1000, multi.core = TRUE)

saveRDS(resultsDF, file = "NGS830results.rds")

#Crispr-specific quality control and visualization tools: 
ct.gRNARankByReplicate(es, "TREATMENT_NAME")
ct.gRNARankByReplicate(es, "TREATMENT_NAME", controls = TRUE, annotation = ann, geneSymb = "Ripk3")


ct.viewControls(es, ann, order.by = "TREATMENT_NAME", normalize = FALSE)
ct.viewControls(es, ann, order.by = "TREATMENT_NAME", normalize = TRUE)
ct.stackGuides(es, sample.ordering = "TREATMENT_NAME", plotType = "Target", annotation = ann)
ct.stackGuides(es, sample.ordering = "TREATMENT_NAME", plotType = "gRNA", annotation = ann)

sn <- pData(es)$TREATMENT_NAME
names(sn) <- row.names(pData(es))
ct.guideCDF(es, sampleNames = sn, plotType = "gRNA")
ct.guideCDF(es, sampleNames = sn, plotType = "Target", annotation = ann)
ct.topTargets(fit, resultsDF, ann, ntargets = 10, enrich = TRUE)
ct.topTargets(fit, resultsDF, ann, ntargets = 10, enrich = FALSE)
ct.viewGuides("Ripk1", fit, ann)

enrichmentResults <- ct.PantherPathwayEnrichment(resultsDF, pvalue.cutoff = 0.01, enrich = TRUE, organism = 'mouse')






