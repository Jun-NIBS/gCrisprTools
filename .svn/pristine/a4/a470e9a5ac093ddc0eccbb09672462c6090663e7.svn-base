##' @title View nontargeting guides within an experiment 
##' @description This function tries to identify, and then plot the abundance of, the full set of non-targeting controls from an ExpressionSet 
##' object. Ideally, the user will supply a geneSymbol present in the appropriate annotation file that uniquely identifies the nontargeting gRNAs.
##' Absent this, the the function will search for common identifier used by nontargeting controls (geneID "no_gid", or geneSymbol NA).    
##' @param eset An ExpressionSet  object containing, at minimum, a matrix of gRNA abundances extractable with the exprs() function, and a metadata 
##' object optionally containing size factors for DEseq-style normalization. 
##' @param annotation An annotation file for the experiment, usually extracted with \code{ep.load.annot()} in ExpressionPlot. gRNAs are annotated by 
##' row, and must minimally contain columns \code{geneSymbol} and \code{geneID}.
##' @param geneSymb The \code{geneSymbol} identifier in \code{annotation} that corresponds to nontargeting gRNAs. If absent, \code{ct.ViewControls} will
##' attempt to infer nontargeting guides by searching for \code{"no_gid"} or \code{NA} in the appropriate columns.  
##' @param  order.by A column in the metadata of \code{eset} with which to group the samples using \code{order()}. 
##' @param normalize Logical indicating whether to attempt to normalize the data in the \code{eset} by DESeq size factors present in the metadata. If \code{TRUE},
##' then the metadata must contain a column containing these factors, named \code{sizeFactor.crispr-gRNA}.  
##' @return An image of nontargeting control gRNA abundances on the default device. 
##' @author Russell Bainer
##' @export

ct.viewControls <- function(eset, annotation, geneSymb = NULL, order.by = "SAMPLE_LABEL", normalize = TRUE){
  require(Biobase)
  
  #Find the row.names that correspond to the guides. 
  if(is.null(geneSymb)){
    message('No control geneSymbol supplied.')  


if((sum(is.na(annotation$geneSymbol)) > 0) && (sum(annotation$geneID == "no_gid") > 0)){
      message('NA and "no_gid" elements are both present in the supplied annotation file, so I am using the "no_gid" elements. If you wish to select another set of gRNAs use the geneSymb command.')  
      } 

if(sum(annotation$geneID == "no_gid") > 0){
        ntc <- row.names(annotation)[annotation$geneID == "no_gid"]
      } else if (sum(is.na(annotation$geneSymbol)) > 0){
        ntc <- row.names(annotation)[is.na(annotation$geneSymbol)]
        message('No "no_gid" geneIDs in the annotation file, Using gRNAs targeting geneSymbol NA.')
      } else {
        stop('No suitable control elements are present in the supplied annotation file. Please specify a geneSymbol to display.')
      }

    p <- pData(eset)
    if(!(order.by %in% names(p))){
      stop(paste(order.by, "not found in the names of the provided metadata. Please specify one of the following values:", 
                 paste(names(p), collapse = ',')))
      }
  }
    colorSpace <- colorRampPalette(c("lightblue", "darkred"))(length(ntc)) 
    p <- p[order(as.character(p[,order.by])),]
    counts <- t(exprs(eset)[ntc,row.names(p)] + 1)
    counts <- log2(counts)
    counts <- counts[,order(colMeans(counts))]

    plottitle <- paste0("Nontargeting Guide Abundance (Raw Reads)")
  if(normalize){
    if(!("sizeFactor.crispr-gRNA" %in% names(p))){
      stop('No size factor column present in the pData of the supplied eset. Metadata should contain a column "sizeFactor.crispr-gRNA" to enable normalization.')
    }
    counts <- counts/as.numeric(p[,"sizeFactor.crispr-gRNA"])   #Normalize by size factor
    plottitle <- paste0("Nontargeting Guide Abundance (Normalized)")
  }

    #Set up and draw the plot
    ylimit <- range(counts) + c(-1,1)
    xlimit <- nrow(counts)

par(mar = c(10,4,4,6), xpd = TRUE)
plot(1:xlimit, counts[,1],  
         main = plottitle,     
         ylab = "Log2 Normalized Counts",
         xlab = "",
         xaxt = 'n',
         xlim = c(1,xlimit), 
         ylim = ylimit, 
         type = "l", lwd = 2, 
         col = colorSpace[1])
for(q in 2:ncol(counts)){lines(1:xlimit, counts[,q], lwd = 2, col = colorSpace[q])}
Axis(side = 1, labels = p[,order.by], at = 1:xlimit, las = 3)
legend(xlimit + 1, ylimit[2], legend = colnames(counts), fill = colorSpace, cex = 0.5)
}


  
  
  
  
  
  
  
  
  
  
  
  
  
  
  



