##' @title Run a (limited) Geneset Enrichment Analysis on the results of a Crispr experiment. 
##' @description This function enables some limited geneset enrichment-type analysis of data derived from a pooled Crispr 
##' screen using the PANTHER pathway database. Specifically, it identifies the set of targets significantly enriched or 
##' depleted in a \code{summaryDF} object returned from \code{ct.generateResults} and compares that set to the remaining 
##' targets in the screening library using the \code{hyperGeometricTest()} function in \code{multiGSEA}.  
##' 
##' Note that many Crispr gRNA libraries specifically target biased sets of genes, often focusing on genes involved
##' in a particular pathway or encoding proteins with a shared biological property. Consequently, the enrichment results 
##' returned by this function represent the pathways containing genes disproportionately targeted *within the context 
##' of the screen*, and may or may not be informative of the underlying biology in question. This means that 
##' pathways not targeted by a Crispr library will obviously never be enriched within the positive target set regardless of 
##' their biological relevance, and pathways enriched within a focused library screen are similarly expected to partially 
##' reflect the composition of the library and other confounding issues (e.g., number of targets within a pathway). 
##' Analysts should therefore use this function with care. For example, it might be unsurprising to detect pathways related 
##' to histone modification within a screen employing a crispr library targeting epigenetic regulators. 
##' 
##' @param summaryDF A dataframe summarizing the results of the screen, returned by the function \code{\link{ct.generateResults()}}. 
##' @param pvalue.cutoff A gene-level p-value cutoff defining targets of interest within the screen. Note that this is a 
##' nominal p-value cutoff to preserve end-user flexibility. 
##' @param enrich Logical indicating whether to consider guides that are enriched (default) or depleted within the screen. 
##' @param organism The species of the cell line used in the screen; this is passed to the \code{species} parameter 
##' in the \code{getPantherGeneSetDb} function.    
##' @return A dataframe of enriched pathways.
##' @author Russell Bainer (hyperGeometricTest and multiGSEA package by Steve Lianoglou)
##' @export

ct.PantherPathwayEnrichment <- function(summaryDF, pvalue.cutoff = 0.01, enrich = TRUE, organism = 'human'){
  
  #Check the input: 
    if(!is.logical(enrich)){
      stop("enrich must be set to TRUE or FALSE.")
    }
    if(!setequal(names(summaryDF), c("symbol","target","geneID","geneSymbol","gRNA Log2 Fold Change","gRNA Depletion P",
                                     "gRNA Depletion Q","gRNA Enrichment P","gRNA Enrichment Q", "Gene-level Enrichment P",
                                     "Gene-level Enrichment Q", "Gene-level Depletion P",  "Gene-level Depletion Q",
                                     "Median log2 Fold Change"))){
      stop("Please supply a summaryDF object generated from ct.generateResults() in the gCrisprTools package.")
    }

    if(!(pvalue.cutoff <= 1 & pvalue.cutoff >= 0 & is.numeric(pvalue.cutoff))){
      stop("pvalue.cutoff must be a numeric value between 0 and 1.")
    }
    
    if(!(species %in% c('human', 'mouse'))){
      stop("species must be either 'human' or 'mouse'.")
    }
    
    message("WARNING: The interpretation of gene set enrichment analyses in Crispr screens is tricky. See the man page for further details.")
    
    #Condense the summary frame to gene-level estimates and isolate the ones that we are testing
    summaryDF <- summaryDF[!duplicated(summaryDF$geneID),]
    selected <- summaryDF$geneID[summaryDF[,"Gene-level Enrichment P"] <= pvalue.cutoff]   
    
    if(enrich == FALSE){
      selected <- summaryDF$geneID[summaryDF[,"Gene-level Depletion P"] <= pvalue.cutoff]   
    }
    
    #make the database and conform it to the provided result: 
    pdb <- suppressWarnings(getPantherGeneSetDb(type='pathway', species= organism))
    pdb <- conform(pdb, unique(summaryDF$geneID))
    hg.res <- hyperGeometricTest(pdb, selected, summaryDF$geneID)
    return(hg.res[order(hg.res$pval),])
    }

  
  
  
  
  
  
  
  
  
  



