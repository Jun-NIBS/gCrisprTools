##' @title Visualization of Raw gRNA Count Densities
##' @description This function plots the per-sample densities of raw gRNA read counts on the log10 scale. The curve colors are assigned based on a user-
##' specified column of the pData contained in the ExpressionSet. This function is primarily useful to determine whether libraries are undersequenced 
##' (low mean raw gRNA counts), or if PCR artifacts may be present (subset of extremely abundant guides, multiple gRNA distribution modes). In most 
##' well-executed experiments the majority of gRNAs will form a tight distribution around some reasonably high average read count (hundreds of reads), 
##' at least among the control samples. Excessively low raw count values can compromise normalization steps and subsequent estimation of gRNA levels, especially 
##' in screens in which most gRNAs have minimal effects on cell viability. 
##' @param eset An ExpressionSet object containing, at minimum, count data accessible by exprs() and some phenoData. 
##' @param class.var The name of a column in the phenoData slot of eset that can be used to group samples. Coerced to a factor. 
##' @author Russell Bainer
##' @export
ct.rawCountDensities <- function(eset, class.var){

  if(class(eset) != "ExpressionSet"){stop(paste(deparse(substitute(eset)), "is not an ExpressionSet."))}
  
  phenodata <- pData(eset)

  if(!(class.var %in% names(phenodata))){stop(paste(deparse(substitute(class.var)), "is not a column in in the phenoData of", deparse(substitute(eset)), "."))}
  phenodata[,class.var] <- as.factor(phenodata[,class.var]) 
  
  e.dat <- log10(exprs(eset) + 1)
  densities <- apply(e.dat, 2, density)
  
  y <- c(0, max(unlist(lapply(densities, function(dens){max(dens$y)}))))
  x <- c(0,  max(ceiling(unlist(lapply(densities, function(dens){max(dens$x)})))));  
  plot(x[1], y[1], xlim = x, ylim = y, xlab = "gRNA Read Counts (Raw)", ylab = "Density", pch = NA, main = "Raw gRNA Counts (Log Scale)", xaxt = "n")
  axis(1, at= 0:x[2], labels = 10^(0:x[2]))
 
  #Set up colors for the factor
  colors <- colorRampPalette(c("blue", "red"), alpha = TRUE)(length(levels(phenodata[, class.var])))
  colors <- gsub("FF$", "99", colors, perl = TRUE)
  
  invisible(lapply(1:length(densities), function(x){lines(densities[[x]], col = colors[as.numeric(phenodata[colnames(e.dat)[x], class.var])])}))
  legend("topleft", legend = levels(phenodata[, class.var]), fill = colors)

}



