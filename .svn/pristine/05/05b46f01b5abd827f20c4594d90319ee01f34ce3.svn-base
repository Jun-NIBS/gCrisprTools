##' @title Normalize sample abundance estimates by the slope of the values in the a central range
##' @description This function normalizes Crispr gRNA abundance estimates by equalizing the slopes of the middle (logged) values of the
##' distribution across samples. Specifically, the algorithm ranks the gRNA abundance estimates within each sample and determines a relationship between 
##' rank change and gRNA within a trimmed region of the distribution via a linear fit. It then adjusts each sample such that the center of the logged
##' abundance distribution is strictly horizontal and returns these values as normalized counts in the '\code{exprs}' slot of the input eset. 
##' @param eset An ExpressionSet object containing, at minimum, count data accessible by \code{exprs}. 
##' @param trim The proportion to be trimmed from each end of the distributionbefore performing the linear fit; algorithm defaults to 25% such that the
##' fit is performed on the interquartile range. 
##' @author Russell Bainer
##' @export

ct.normalizeBySlope <- function(eset, trim = 0.25){
  
  if(class(eset) != "ExpressionSet"){stop(paste(deparse(substitute(eset)), "is not an ExpressionSet."))}
  
  #log them
  e.dat <- log2(exprs(eset) + 1)
  #extract the inner 50% and fit a lm
  edges <- round(c((nrow(e.dat)*.25), (nrow(e.dat)*.75)))  
  shuffle <- apply(e.dat, 2, sort, decreasing = TRUE, index.return = TRUE)
  locs <- round((nrow(e.dat)*trim)): round(nrow(e.dat)*(1-trim))
  fits <- lapply(shuffle, function(x){lm(unlist(x[[1]][locs]) ~ locs)$coefficients[2]})
  
  #correct the values
  corrected <- simplify2array(lapply(names(fits), function(x){
    outlist <- shuffle[[x]][[1]] + ((length(shuffle[[x]][[1]]):1) * fits[[x]])
    return(outlist[row.names(e.dat)])}))
  colnames(corrected) <- names(fits)
  
  #update and return the eset
  exprs(eset)<- round(2^corrected - 1)
  return(eset)
}

