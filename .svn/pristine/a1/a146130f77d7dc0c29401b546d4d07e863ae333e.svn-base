##' @title View a stacked representation of the most variable targets or individual guides within an experiment, 
##' as a percentage of the total aligned reads
##' @description This function identifies the gRNAs or targets that change the most from sample to sample within an experiment as a percentage of 
##' the entire library. It then plots the abundance of the top \code{nguides} as a stacked barplot for all samples in the experiment. The purpose of this 
##' algorithm is to detect potential distortions in the library composition that might not be properly controlled by sample normalization, and so 
##' the most variable entites are defined by calculating the percent of aligned reads that they contribute to each sample, and then ranking each entity
##' by the range of these percentages across all samples. Consequently, gRNAs or Targets that are highly abundant in at least one condition will be 
##' are more likely to be identified. 
##' @param eset An ExpressionSet  object containing, at minimum, a matrix of gRNA abundances extractable with the exprs() function, and a metadata 
##' object containing a column named \code{SAMPLE_LABEL} containing unique identifers for each sample. 
##' @param sample.ordering An optional string corresponding to the column in the \code{eset} metadata to use when arranging the samples for visualization.  
##' @param nguides The number of guides (or targets) to display.    
##' @param plotType A string indicating whether the individual guides should be displayed ("\code{gRNA}"), or if they should be aggregated into target-level
##' estimates ("\code{Target}") according to the \code{geneSymbol} column in the \code{annotation} object.  
##' @param annotation An optional data.frame containing an annotation object to be used to aggregate the guides into targets, usually extracted with 
##' \code{ep.load.annot()} in ExpressionPlot. gRNAs are annotated by row, and must minimally contain a column \code{geneSymbol} indicating the target elements.
##' @return A stacked barplot displaying the appropriate entities on the default device. 
##' @author Russell Bainer
##' @export

ct.stackGuides <- function(eset, sample.ordering = "SAMPLE_LABEL", nguides = 20, plotType = "gRNA", annotation = NULL){
  current.graphic.params <- par(no.readonly = TRUE)
  on.exit(suppressWarnings(par(current.graphic.params)))
  
  require(ggplot2)
  require(Biobase)
  #Convert all gRNA abundance to % representation
  d <- exprs(eset)
  p <- pData(eset)
  
  if(!(sample.ordering %in% names(p))){stop(paste(sample.ordering, 'not in the names of the metadata contained in the specified eset.'))}
  if(!("SAMPLE_LABEL" %in% names(p))){stop('Metadata must contain a SAMPLE_LABEL column, typically uniquely specifying all samples.')}
  if(!is.numeric(nguides)){stop('Please specify a numeric number of guides to display.')}  
  if(class(eset) != "ExpressionSet"){stop('eset must be an expressionset object.')}  
  if(!(plotType %in% c("gRNA", "Target"))){stop('Please specify "gRNA" or "Target" to be displayed.')}
  
  #idiosyncracies of ggplot forces rearrangement of factor labels for proper plotting. 
  p <- p[order(as.character(p[,sample.ordering]), as.character(p[,"SAMPLE_LABEL"])),]
  
  p[, "SAMPLE_LABEL"] <- factor(p[, "SAMPLE_LABEL"], levels = as.character(p[, "SAMPLE_LABEL"])[!duplicated(as.character(p[, "SAMPLE_LABEL"]))])
  p[, sample.ordering] <- factor(p[, sample.ordering], levels = as.character(p[, sample.ordering])[!duplicated(as.character(p[, sample.ordering]))])

  plottitle <- paste0("Top ", nguides, " Most Variable ", plotType, "s Across Experimental Condition")
  
  if(plotType == "Target"){
    if(is.null(annotation) | !("geneSymbol" %in% names(annotation))){
      stop('An annotation object containing a "geneSymbol" column must be supplied to display target-level representation.')}    
    
    if(sum(is.na(annotation$geneSymbol)) > 0){
      message('Converting missing values in the annotation file to "NoTarget".')
      annotation$geneSymbol[is.na(annotation$geneSymbol)] <- "NoTarget"
    }
    message('Summarizing gRNA counts into targets.')
    genects <- lapply(unique(annotation$geneSymbol), function(x){
      if(sum(annotation$geneSymbol %in% x) > 1){
        colSums(d[row.names(annotation)[annotation$geneSymbol %in% x],])
      } else {
        d[row.names(annotation)[annotation$geneSymbol %in% x],]
      }})
    d <- data.frame(t(simplify2array(genects)))
    row.names(d) <- unique(annotation$geneSymbol)
    }
  
  d <- apply(d, 2, function(x){x/sum(x)})
  d <- d[order(apply(d, 1, function(x){base::range(x)[2] - base::range(x)[1]}), decreasing = TRUE),row.names(p)]

  d <- d[1:nguides,]
  
  plotframe <- data.frame(gRNA = rep(row.names(d), ncol(d)), 
                          Condition = rep(p[,"SAMPLE_LABEL"], each = nrow(d)),
                          PercentTotalReads = as.numeric(d))
   
  colorScale <- colorRampPalette(c("darkred", "white", "blue"))(nguides)
   ggplot(plotframe, aes(x = Condition, y = PercentTotalReads, fill = gRNA)) + geom_bar(stat = "identity", position = 'stack') + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  scale_fill_manual(values=colorScale) + ggtitle(plottitle)  
}

  
  
  
  
  
  
  
  
  
  
  
  



