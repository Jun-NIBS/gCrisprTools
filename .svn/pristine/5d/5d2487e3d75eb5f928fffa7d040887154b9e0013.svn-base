
saveData <- function(v1, storedir, filename=NULL) {
	if(is.null(filename)) 
		filename = deparse(substitute(v1))
	saveRDS(v1, file=sprintf("%s/%s.rds", storedir, filename))
	sprintf("%s/%s.rds", storedir, filename)
}


##' Write mageck input file
##'
##' @title Write mageck input file
##' @param cds count dataset
##' @param varname string column in pData to select control and treatment samples from
##' @param treat string representing the treatment
##' @param control string representing the control
##' @param filename for mageck file
##' @param expName string description of the experiment
##' @return string, command to run mageck
##' @author Sarah Kummerfeld
##' @export
write.mageck.input <- function(cds, varname, treat, control, filename, expName) {

	cdsSub = cds[,which(pData(cds)[,varname] %in% c(control, treat))]
	cSamps = sampleNames(cdsSub)[which(pData(cdsSub)[,varname] == control)]
	tSamps = sampleNames(cdsSub)[which(pData(cdsSub)[,varname] == treat)]
	magick = data.frame(sgRNA=featureNames(cdsSub), gene=fData(cdsSub)$geneSymbol, counts(cdsSub))
	write.table(magick, file=filename, quote=F, sep="\t", row.names=F)
	sprintf("mageck test -k %s -t %s -c %s -n %s", filename, 
		paste(tSamps, collapse=","), paste(cSamps,collapse=","), expName)
}

##' Read mageck output file
##'
##' @title Read mageck output file
##' @param filename base for mageck output
##' @return list with elements genes and guides representing the respective mageck results
##' @author Sarah Kummerfeld
##' @export
read.mageck.output <- function(filename) {

	ma.genes = read.table(sprintf("%s.gene_summary.txt", filename), sep="\t", header=T, stringsAsFactors=F)
	ma.genes = ma.genes[which(!is.na(ma.genes$id)),]
	ma.guides = read.table(sprintf("%s.sgrna_summary.txt", filename), sep="\t", header=T, stringsAsFactors=F)
	list(genes=ma.genes, guides=ma.guides)
}

mageck.output.ok <- function(filename) {
	if(file.exists( sprintf("%s.gene_summary.txt", filename) ) & file.exists(sprintf("%s.sgrna_summary.txt", filename))) {
		return(TRUE)
	}
	return(FALSE)
}



sequence.overview.plot <- function(acCds, main="") {
	dfr = as.data.frame(t(counts(acCds)))
	dfr$targets/apply(dfr, 1, sum)
	dfr$sample <- row.names(dfr)
	mdfr <- melt(dfr, id.vars = "sample")
	return(ggplot(mdfr, aes(x = sample, y = value,fill=variable)) + geom_bar(stat='identity') +  
	       ggtitle(main) + theme(axis.text.x = element_text(angle = 90)))
}


grnas.per.gene.plot <- function(cds, ...) {
	cleannames <- sapply(row.names(cds), function(x){strsplit(x, split = "_")[[1]][1]})
	freqs <- table(table(cleannames))
	barplot(freqs, ylab = "frequency", xlab="number of gRNAs per gene target" , log="y", ...)
}

grnas.per.group.plot <- function(cds, main="", ...) {
	gdetect10 <- apply(counts(cds), 2, function(x){length(which(x > 10))})
	total = length(featureNames(cds))
	boxplot(gdetect10 ~ cds$group, main = sprintf("gRNAs Detected (library total = %d)\n%s", total, main), 
		ylab="gRNAs detected (counts > 10)", ...)
	total - gdetect10
}


count.sig.genes <- function(toptab, direction="up", pval = 0.01, fc = 1)
{
	if(direction == "up") {
		sig = table(toptab[which(with(toptab, adj.P.Val < pval & logFC > fc)),"geneSymbol"])
	} else {
		sig = table(toptab[which(with(toptab, adj.P.Val < pval & logFC < fc)),"geneSymbol"])
	}
	allsymbs = unique(toptab$geneSymbol)
	zeros = rep(0,length(setdiff(allsymbs, names(sig))))
	names(zeros) = setdiff(allsymbs, names(sig))
	c(sig, zeros)
}

add.sig.per.gene.to.table <- function(tt) {
	sigUpGenes = count.sig.genes(tt, "up", pval=0.05)
	sigDownGenes = count.sig.genes(tt, "down", pval=0.05)
	tt$sigUpGenes = sigUpGenes[tt$geneSymbol]
	tt$sigDownGenes = sigDownGenes[tt$geneSymbol]
	rownames(tt) = tt$symbol
	tt
}

top.table.genes.fc.plot <- function(tt, ...) {
	print(xyplot(tt$sigUpGenes ~ tt$logFC, ch=20, ylab="number of up-regulated gRNAs in treatment", xlab="log2(fold-change)", ...))
	print(xyplot(tt$sigDownGenes ~ tt$logFC, ch=20, ylab="number of down-regulated gRNAs in treatment", xlab="log2(fold-change)", ...))
}



plot.median.fc <- function(sig_guides, tt, ...) {
	ctlMeds <- apply(esetFiltNorm[,grep("Control", esetFiltNorm$group)], 1, median)
	treatMeds <- apply(esetFiltNorm[,grep("LPS", esetFiltNorm$group)], 1, median)
	fc = tt[names(ctlMeds),"logFC"]
	pval = -log10(tt[names(ctlMeds),"adj.P.Val"])
	sig = ifelse(names(ctlMeds) %in% sig_guides, "Higher in LPS", "Not higher in LPS")
	dat = data.frame(median = c(ctlMeds, treatMeds), group = c(rep("Control", length(ctlMeds)), rep("LPS", length(treatMeds))),
		   fc=c(fc,fc), pval=c(pval, pval), sig=c(sig, sig))
	rownames(dat) = c(paste0("ctl_", names(ctlMeds)),paste0("lps_",names(treatMeds)))
	ltheme$superpose.symbol$alpha = c(0.9, 0.4)
	ltheme$superpose.symbol$col = c("purple", "grey")
	ltheme$superpose.symbol$fill = c("purple", "grey")
	print(xyplot(log2(dat$median) ~ dat$fc | dat$group, ylab="log2(median)", 
		     xlab="log2(fold-change)", groups=dat$sig, par.settings=ltheme, auto.key=T, ...))
	print(xyplot(log2(dat$median) ~ dat$pval | dat$group, 
		     xlab="-log10(pval)", ylab="log2(median)",
		     groups=dat$sig, par.settings=ltheme, auto.key=T, ...))
}

show.sig <- function(eset, tt, ma.genes, ma.guides, title, ...) {
	ttSig = tt[tt$sigUpGenes > 1 & tt$adj.P.Val < 0.01 & tt$logFC > 1,]

	xyplot(tt$AveExpr ~ tt$logFC, par.settings=ltheme, xlab="log2(fold-change)", ylab="average expression")
	xyplot(tt$AveExpr ~ -log10(tt$adj.P.Val), par.settings=ltheme, xlab="-log10(adj pval)", ylab="average expression")

	maSig_genes = arrange(ma.genes[ma.genes$fdr.pos < 0.1,], rank.pos)$id
	maSig = ma.guides[ma.guides$p.high < 0.05 & ma.guides$high_in_treatment == "True" & ma.guides$Gene %in% maSig_genes,]

	plot.median.fc(rownames(ttSig), tt, main=paste("Voom/limma", title), ...)
	plot.median.fc(maSig$sgrna, tt, main=paste("Mageck", title), ...)

	es = eset[rownames(ttSig),]
	ctlMeds <- apply(es[,grep("Control", es$group)], 1, median)
	treatMeds <- apply(es[,grep("LPS", es$group)], 1, median)
	fc = tt[names(ctlMeds),"logFC"]
	pval = -log10(tt[names(ctlMeds),"adj.P.Val"])
	dat = data.frame(median = c(ctlMeds, treatMeds), group = c(rep("Control", length(ctlMeds)), rep("LPS", length(treatMeds))),
		   fc=c(fc,fc), pval=c(pval, pval))

	xyplot(log2(dat$median) ~ dat$fc, groups=dat$group, xlab = "fold-change", ylab="log2(median)", par.settings=ltheme, auto.key=T, ...)
	xyplot(log2(dat$median) ~ dat$pval, xlab="-log10(Mageck pval)", ylab="log2(median)", groups=dat$group, par.settings=ltheme, auto.key=T, ...)
}

gene.summary <- function(tt, title) {
	ttSort = arrange(tt, sigUpGenes, logFC, decreasing=T)
	ttSort$guideId = gsub(".*_", "", ttSort$symbol)
	tmpUp = ttSort[which(ttSort$sigUpGenes > 1 & ttSort$adj.P.Val < 0.05 & ttSort$logFC > 1),]
	tmpUp <- transform(tmpUp, geneSymbol = factor(geneSymbol, levels = unique(tmpUp$geneSymbol)))
	ggplot(tmpUp, aes(x = geneSymbol, y = sigUpGenes,fill=guideId)) + geom_bar(stat='identity') +  
		theme(axis.text.x = element_text(angle = 90))
}


show.mageck <- function(ma.guides, ma.genes) {
	sigUpGenes = get_sig_genes(tt, "up", pval=0.05)
	print(xyplot(-log10(ma.guides$p.high) ~ tt[ma.guides$sgrna,]$logFC, par.settings=ltheme, xlab="logFC", ylab="mageck -log10(p-value)"))

	rownames(ma.genes) = ma.genes$id
	commonIds = intersect(names(sigUpGenes), ma.genes$id)
	spg = sort(sigUpGenes[commonIds])
	ma.common = ma.genes[names(spg),]

	print(xyplot(ma.genes$fdr.pos ~ spg, par.settings=ltheme, ylab="Mageck FDR pos", xlab="number significantly up guides per gene"))
}

orderByGroupMedians <- function(samid, group = "TREATMENT_NAME"){
	grp <- pData(cds)[samid,group];
	meds <- apply(normCounts[,(cds$TREATMENT_NAME == grp)], 1, median)
	return(log2(normCounts[order(meds), samid]));
}

drawGroupSDs <- function(samid, group="TREATMENT_NAME"){
	grp <- pData(cds)[samid,group];
	meds <- apply(normCounts[,(cds$TREATMENT_NAME == grp)], 1, median)
	means <- apply(normCounts[,(cds$TREATMENT_NAME == grp)], 1, mean)
	sds <- sqrt(apply(normCounts[,(cds$TREATMENT_NAME == grp)], 1, mean))
	lines(lowess(1:nrow(normCounts), (sds[order(meds)] + means[order(meds)])), col = "green", lty = "dashed")
	lines(lowess(1:nrow(normCounts), (means[order(meds)] - sds[order(meds)])), col = "green", lty = "dashed")
}

#
#plot(1:nrow(normCounts), orderByGroupMedians(colnames(normCounts)[1]), pch = ".", 
#	     main = "", xlab = "gRNAs Ordered by Median Tags", ylab = "log2(normalized counts)", xaxt = "n")
#	points(1:nrow(normCounts), orderByGroupMedians(colnames(normCounts)[2]), pch = ".", col = "red")
#	points(1:nrow(normCounts), orderByGroupMedians(colnames(normCounts)[3]), pch = ".", col = "blue")
#	points(1:nrow(normCounts), orderByGroupMedians(colnames(normCounts)[4]), pch = ".", col = "green")
#	points(1:nrow(normCounts), orderByGroupMedians(colnames(normCounts)[5]), pch = ".", col = "yellow")
#	points(1:nrow(normCounts), orderByGroupMedians(colnames(normCounts)[6]), pch = ".", col = "grey")
#	legend(nrow(normCounts)*0.75,5, c("Control1", "Control2", "Control3", "KO1", "KO2", "KO3"), 
#       		fill = c("black", "red", "blue", "green", "yellow", "grey"))
#
#
#wt.meds <- apply(normCounts[,(cds$TREATMENT_NAME == "Control")], 1, median)
#ko.meds <- apply(normCounts[,(cds$TREATMENT_NAME == "4OHT treated")], 1, median)
#
#smoothScatter(log2(wt.meds), log2(ko.meds), pch = 20, main = "Median log2 normalized reads per gRNA")
#abline(0,1)


get.melted.subset <- function(eset, genes=NULL,  ...)
{
	if(!is.null(genes))
		eset = eset[which(fData(eset)$geneSymbol %in% genes),]
	groups = eset$group
	names(groups) = sampleNames(eset)
	if(class(eset) == "ExpressionSet")  {
		dfr = as.data.frame(t(exprs(eset)))
	} else {
		dfr = as.data.frame(t(counts(eset)))
		names(groups) = sampleNames(eset)
	}
	dfr$sample <- row.names(dfr)
	mdfr <- melt(dfr, id.vars = "sample", value.name="gRNA")
	mdfr$gene = factor(gsub("_.*", "", mdfr$variable), levels=genes)
	mdfr$group = groups[mdfr$sample]
	colnames(mdfr)[which(colnames(mdfr) == "variable")] = "gRNA"
	mdfr;
}

make.boxplot <- function(eset, yaxis, geneOrder=NULL, ...) {
	mdfr = get.melted.subset(eset, geneOrder, ...)
	mdfr$value = log2(mdfr$value)
	groups = eset$group
	key <- simpleKey(levels(groups), points=TRUE, columns=2, space='bottom')
	key$points$col <- ltheme$superpose.symbol$col[1:length(levels(groups))]
	key$points$pch <- 15
	print(stripplot(mdfr$value ~ mdfr$gene, groups = mdfr$group, key=key, jitter=TRUE, 
	  ylab=yaxis,
	  panel=panel.boxnstripplot, scales = list(x=list(rot=45)), par.settings=ltheme, ...))
}

panel.boxnstripplotY1 <- function (x, y, jitter.data = T, do.out = FALSE, title="", ...) 
{
	panel.bwplot(x, y, pch = "|", cex = 5, do.out = do.out, ...)
	panel.stripplot(x, y, jitter.data = jitter.data, ...)
	panel.lines(x, y=1, col.line="orange", alpha=0.5)
}

fc.boxplot <- function(tt, yaxis, genes, ...) 
{
	ttsub = tt[which(tt$geneSymbol %in% genes),]
	print(stripplot(ttsub$logFC ~ factor(ttsub$geneSymbol, levels=genes), jitter=TRUE, 
	  ylab=yaxis,
	panel = panel.boxnstripplotY1, 
	  scales = list(x=list(rot=45)), par.settings=ltheme, ...))
}


show.top <- function(tt, eset, topGenes, title) {
	fc.boxplot(tt, "log2(fold change)", topGenes, main=title)
	make.boxplot(eset[which(fData(eset)$geneSymbol %in% topGenes),], "log2(normalized counts)", geneOrder= topGenes, main=title)
}


replace.exprs <- function(eset, dat)
{
	exprs(eset) = dat[featureNames(eset),sampleNames(eset)]
	eset;
}

make.datatable <- function(tab, htmldir, name)
{
	tab = tab[,c("symbol", "geneSymbol", "logFC", "t", "P.Value", "adj.P.Val", "sigUpGenes", "sigDownGenes")]
	tab$logFC = sprintf("%.2f", tab$logFC)
	tab$t = sprintf("%.2f", tab$t)
        tab$adj.P.Val = sprintf("%1.1e", tab$adj.P.Val)
	tab$P.Value = sprintf("%1.1e", tab$P.Value)
	write.csv(tab, file=paste0(htmldir, name), quote=FALSE, row.names=F)
	list(link=sprintf("<a href=%s>Download</a>", name), tab=tab)
}

