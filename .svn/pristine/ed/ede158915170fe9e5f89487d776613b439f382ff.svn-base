##' @title Preprocess a "MArrayLM" model fit object to include only one contrast. 
##' @description This function preprocesses a fit object returned from eBayes to include only the values relevant to the
##' \code{modelTerm} specified.  
##' @param fit An object of class MArrayLM to be processed. 
##' @param modelTerm The model coefficeint to be isolated for downstream analyses. 
##' @return A \code{MArrayLM} object for downstream processing. 
##' @author Russell Bainer
##' @import limma
##' @examples 
##' 
##' #Load and preprocess data
##' data('es')
##' library(Biobase)
##' library(limma)
##' vm <- limma::voom(exprs(es), design)
##' 
##' #Make a multi-level contrast
##' design <- model.matrix(~ 0 + TREATMENT_NAME, Biobase::pData(es))
##' colnames(design) <- gsub('TREATMENT_NAME', '', colnames(design))
##' contrasts <- limma::makeContrasts((ControlExpansion - ControlReference), (DeathExpansion - ControlExpansion), levels = design)
##' 
##' #Make a multi-level fit object
##' fit <- limma::lmFit(vm, design)
##' fit <- limma::contrasts.fit(fit, contrasts)
##' fit <- limma::eBayes(fit)  
##' 
##' #And trim it
##' fit2  <- ct.preprocessFit(fit, modelTerm = '(DeathExpansion - ControlExpansion)')
##' 
##' ncol(fit)
##' ncol(fit2)
##' @export 

ct.preprocessFit <- function(fit, modelTerm){
  if(class(fit) != "MArrayLM"){stop(paste(deparse(substitute(fit)), "is not an MArrayLM object."))}
  if(!(modelTerm %in% colnames(fit$coefficients))){stop("Specified coefficient is not present in the fit object.")}

  fit$coefficients <- as.matrix(fit$coefficients[,modelTerm])
  colnames(fit$coefficients) <- modelTerm
  fit$stdev.unscaled <- as.matrix(fit$stdev.unscaled[,modelTerm])
  colnames(fit$stdev.unscaled) <- modelTerm
  fit$t <- as.matrix(fit$t[,modelTerm])
  colnames(fit$t) <- modelTerm
  fit$p.value <- as.matrix(fit$p.value[,modelTerm])
  colnames(fit$p.value) <- modelTerm
  fit$lods <- as.matrix(fit$lods[,modelTerm])
  colnames(fit$lods) <- modelTerm
  
  return(fit)
}















