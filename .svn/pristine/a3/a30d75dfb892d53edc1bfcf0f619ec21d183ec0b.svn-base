##' @title Normalize sample abundance estimates by a spline fit to the nontargeting controls
##' @description This function normalizes Crispr gRNA abundance estimates by fiting a smoothed spline to the nontargeting gRNAs within each sample
##' and then equalizing these curves across the experiment. Specifically, the algorithm ranks the gRNA abundance estimates within each sample and 
##' uses a smoothed spline to determine a relationship between the ranks of nontargeting guides and their abundance estimates. It then removes the
##' spline trend from each sample, centering each experiment around the global median abundance; these values are returned as normalized counts in 
##' the '\code{exprs}' slot of the input eset. 
##' @param eset An ExpressionSet object containing, at minimum, count data accessible by \code{exprs}. 
##' @param annotation An annotation dataframe indicating the nontargeting controls in the geneID column. 
##' @param geneSymb The \code{geneSymbol} identifier in \code{annotation} that corresponds to nontargeting gRNAs. If absent, \code{ct.gRNARankByReplicate} will
##' attempt to infer nontargeting guides by searching for \code{"no_gid"} or \code{NA} in the appropriate columns.  
##' @author Russell Bainer
##' @export

ct.normalizeSpline <- function(eset, annotation, geneSymb = NULL){
  
  if(class(eset) != "ExpressionSet"){stop(paste(deparse(substitute(eset)), "is not an ExpressionSet."))}
  
  #Check the annotation and find the NTC rows
  if(!is.data.frame(annotation)){
    stop("An annotation dataframe must be supplied if controls is TRUE.")
  }
    
  if(!is.null(geneSymb)){
    if(geneSymb %in% annotation$geneSymbol){
      ntc <- row.names(annotation)[annotation$geneSymbol %in% geneSymb]      
    } else {
      stop(paste(deparse(substitute(geneSymb)),"is not present in the geneSymbol column of the annotation file."))
    }
  } else {
      
    if((sum(is.na(annotation$geneSymbol)) > 0) && (sum(annotation$geneID == "no_gid") > 0)){
      message('NA and "no_gid" elements are both present in the supplied annotation file, so I am using the "no_gid" elements. If you wish to select another set of gRNAs use the geneSymb command.')  
      ntc <- row.names(annotation)[annotation$geneID == "no_gid"]
    } else if (sum(is.na(annotation$geneSymbol)) > 0){
      ntc <- row.names(annotation)[is.na(annotation$geneSymbol)]
      message('No "no_gid" geneIDs in the annotation file, Using gRNAs targeting geneSymbol NA.')
    } else {
      stop('No suitable control elements are present in the supplied annotation file. Please specify a geneSymbol to display.')
    }
  }
  
  #log the data and fit curves to the NTCs. 
  e.dat <- log2(exprs(eset) + 1)
  ntcVals <- e.dat[ntc,]
  
  samRanks <- apply(e.dat, 2, rank)
  ntcRanks <- samRanks[ntc,]
 
  fits <- lapply(colnames(e.dat), function(x){smooth.spline(ntcRanks[,x], y = ntcVals[,x])})
  corrections <- lapply(fits, function(x){predict(fits[[1]], 1:nrow(e.dat))})
  names(fits) <- colnames(e.dat)
  #Subtract out the appropriate values
  corrected <- simplify2array(lapply(colnames(e.dat), function(x){(e.dat[,x] - predict(fits[[x]], samRanks[,x])[[2]]) + median(e.dat)}))
  colnames(corrected) <- names(fits)
  
  #update and return the eset
  exprs(eset)<- round(2^corrected - 1)
  return(eset)
}

