##' @title Visualization of Ranked gRNA Abundances by Replicate
##' @description This function median scales and log2 transforms the raw gRNA count data contained in an ExpressionSet, 
##' and then plots the ordered expression values within each replicate. The curve colors are assigned based on a user-
##' specified column of the pData contained in the ExpressionSet. Optionally, this function can plot the location of Nontargeting control 
##' guides (or any guides, really) within the distribution. 
##' @param eset An ExpressionSet object containing, at minimum, count data accessible by exprs() and some phenoData. 
##' @param class.var The name of a column in the phenoData slot of eset that can be used to group samples. Coerced to a factor. 
##' @param controls A logical indicating whetrher to plot the control grna locations or not. If TRUE, \code{annotation} must be supplied.
##' @param annotation An annotation dataframe indicating the nontargeting controls in the geneID column. 
##' @param geneSymb The \code{geneSymbol} identifier in \code{annotation} that corresponds to nontargeting gRNAs. If absent, \code{ct.gRNARankByReplicate} will
##' attempt to infer nontargeting guides by searching for \code{"no_gid"} or \code{NA} in the appropriate columns.  
##' @param med.scale Logical indicating whether to rescale the distributions to equalize the medians.
##' @author Russell Bainer
##' @export
ct.gRNARankByReplicate <- function(eset, class.var, controls = FALSE, annotation = NULL, geneSymb = NULL, med.scale = TRUE){
  #current.graphic.params <- par(no.readonly = TRUE)
  #on.exit(suppressWarnings(par(current.graphic.params)))

  if(class(eset) != "ExpressionSet"){stop(paste(deparse(substitute(eset)), "is not an ExpressionSet."))}
  
  p <- pData(eset)
  if(!(class.var %in% names(p))){stop(paste(deparse(substitute(class.var)), "is not a column in in the phenoData of", deparse(substitute(eset)), "."))}
  p[,class.var] <- as.factor(p[,class.var]) 
  
  e.dat <- exprs(eset)
  #Median scale them, as directed
  if(med.scale){
    med <- apply(e.dat, 2, median)    
    if(min(med) <= 0){
      stop("At least one sample has a median of zero observed counts across all gRNAs, so normalization probably isn't going to work well. Rerun with the med.scale option set to FALSE.")
      }
    med <- med/median(med) 
    e.dat <- t(t(e.dat)/med)
    }
  
  e.dat <- log2(e.dat + 1)
  
  y <- range(e.dat);
  x <- c(1, nrow(e.dat));  
  plot(x[1], y[1], xlim = x, ylim = y, xlab = "gRNA Abundance Rank", ylab = "Log2 Counts", pch = NA, main = geneSymb)
  
  colors <- colorRampPalette(c("blue", "red"), alpha = TRUE)(length(levels(p[, class.var])))
  colors <- gsub("FF$", "99", colors, perl = TRUE)
  
  invisible(lapply(1:ncol(e.dat), function(x){lines(1:nrow(e.dat), sort(e.dat[,x], decreasing = TRUE), col = colors[as.numeric(p[colnames(e.dat)[x], class.var])])}))

  #Add the NTC locations if requested. 
  if(controls){
    if(!is.data.frame(annotation)){
      stop("An annotation dataframe must be supplied if controls is TRUE.")
    }
    
    if(!is.null(geneSymb)){
      if(geneSymb %in% annotation$geneSymbol){
        ntc <- row.names(annotation)[annotation$geneSymbol %in% geneSymb]      
        } else {
        stop(paste(deparse(substitute(geneSymb)),"is not present in the geneSymbol column of the annotation file."))
          }
      } else {
      
        if((sum(is.na(annotation$geneSymbol)) > 0) && (sum(annotation$geneID == "no_gid") > 0)){
          message('NA and "no_gid" elements are both present in the supplied annotation file, so I am using the "no_gid" elements. If you wish to select another set of gRNAs use the geneSymb command.')  
        } 
    
        if(sum(annotation$geneID == "no_gid") > 0){
          ntc <- row.names(annotation)[annotation$geneID == "no_gid"]
        } else if (sum(is.na(annotation$geneSymbol)) > 0){
          ntc <- row.names(annotation)[is.na(annotation$geneSymbol)]
          message('No "no_gid" geneIDs in the annotation file, Using gRNAs targeting geneSymbol NA.')
        } else {
          stop('No suitable control elements are present in the supplied annotation file. Please specify a geneSymbol to display.')
        }
      }
    #make a table of the ntc locations and ranks
    ntc.ranks <- (apply(e.dat, 2, rank))
    ntc.ranks <- ntc.ranks[ntc,]
    ntc.ranks <- nrow(e.dat) - ntc.ranks
    ntc.dat <- e.dat[ntc,]
    
    invisible(lapply(1:ncol(ntc.dat), function(x){points(ntc.ranks[,x], ntc.dat[,x], col = colors[as.numeric(p[colnames(e.dat)[x], class.var])], pch = 18)}))
    }
  legend("topright", legend = levels(p[, class.var]), fill = colors)
}



