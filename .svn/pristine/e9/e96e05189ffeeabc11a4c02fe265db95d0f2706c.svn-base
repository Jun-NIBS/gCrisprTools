##' @title Remove low-abundance elements from an ExpressionSet object
##' @description This function removes gRNAs only present in very low abundance across all samples of a pooled Crispr 
##' screening experiment. In most cases very low-abundance guides are the
##' result of low-level contamination from other libraries, and often distort standard normalization approaches. This 
##' function trims gRNAs in a largely heuristic way, assuming that the majority of 'real' gRNAs within the library are 
##' comparably abundant in at least some of the samples (such as unexpanded controls), and that contaminants are 
##' present at negligible levels. Specifically, the function trims the \code{trim} 
##' most abundant guides from the upper tail of each log-transformed sample distribution, and then omits gRNAs whose 
##' abundances are always less than \code{ratio} of this 
##' value. 
##' @param eset An unnormalized \code{ExpressionSet} object containing, at minimum, a matrix of gRNA counts accessible with \code{exprs()}. 
##' @param trim The number of gRNAs to be trimmed from the top of the distribution before estimating the abundance range. Empirically, this 
##' usually should be equal to about 2%-5% of the guides in the library. 
##' @param ratio Maximum abundance of contaminant gRNAs, expressed as a proportion of the trimmed range of each sample.
##' @param control.samples An optional character vector indicating the control samples to test.
##' @plot.it Logical value indicating whether to plot the adjusted gRNA densities on the default device. 
##' @return An \code{ExpressionSet} object, with trace-abundance gRNAs omitted. 
##' @author Russell Bainer
##' @export

ct.filterReads <- function(eset, trim = 500, ratio = 0.0625, control.samples = NULL, plot.it = TRUE){
  
  if(class(eset) != "ExpressionSet"){stop(paste(deparse(substitute(eset)), "is not an ExpressionSet."))}
  if(!is.numeric(trim)){stop(paste("trim is not a numeric value."))}
  if(!is.numeric(ratio)){stop(paste("ratio is not a numeric value."))}

  e <- log2(exprs(eset))
  if(!is.null(control.samples)){
    if(length(setdiff(control.samples, colnames(e))) != 0){stop("One or more of the provided control samples is not present in the colnames of the voom object.")}
    if(length(control.samples) == 0){stop("The provided control samples vector is empty. Please set to NULL if you do not wish to specify controls for this experiment.")}
    e <- e[,control.samples]
  }
  
  #Trim and discard the elements that never cross the minimum threshold
  e.cuts <- apply(e, 2, sort, decreasing = TRUE)[trim,] - log2(1/ratio)
  whitelist <- row.names(e)[colSums(apply((t(e) - e.cuts), 2, sign)) != -ncol(e)]

  new.es <- es[whitelist,]
    
  #Raw
  if(plot.it){
    par(mfrow= c(2,1))
    ds <- apply(log2(exprs(eset)), 2, density)
    ymax <- max(unlist(lapply(ds, function(x){x$y})))
    xr <- range(unlist(lapply(ds, function(d){d$x})))
    plot(ds[[1]], main = 'Raw gRNA Density', 
         ylim = c(0, ymax), xlim = xr, 
         xlab = "Raw Log2 gRNA Count", 
         ylab = "Density")
    invisible(lapply(ds, lines))
    if(!is.null(control.samples)){
      ds <- apply(log2(exprs(eset))[,control.samples], 2, density)
      invisible(lapply(ds, lines, col = "red"))
      legend("topright", "Control", fill = "red")  
    }    
    
    #corrected
    ds <- apply(log2(exprs(new.es)), 2, density)
    ymax <- max(unlist(lapply(ds, function(x){x$y})))
    xr <- range(unlist(lapply(ds, function(d){d$x})))
    plot(ds[[1]], main = 'Corrected gRNA Density', 
         ylim = c(0, ymax), xlim = xr, 
         xlab = "Normalized Log2 gRNA Count", 
         ylab = "Density")
    invisible(lapply(ds, lines))
    if(!is.null(control.samples)){
      ds <- apply(log2(exprs(new.es))[,control.samples], 2, density)
      invisible(lapply(ds, lines, col = "red"))
      legend("topright", "Control", fill = "red")  
      }
     }
  
  return(new.es)
  }

